#!/usr/bin/python

__author__ = 'baohua'

import os
import subprocess
import sys

from oslo.config import cfg

from heatgen.model.model import Model
from heatgen.mapping.openstack import Client
from heatgen.util.log import output, error
from heatgen.util import config


# Fix setuptools' evil madness, and open up (more?) security holes
if 'PYTHONPATH' in os.environ:
    sys.path = os.environ['PYTHONPATH'].split(':') + sys.path

CONF = cfg.CONF

def gen_template(model, filename='policy.json', reverse=False):
    template = model.get_template(reverse)
    if not template:
        error("Generate template model failed.\n")
        return None
    output('Export template file to %s.\n' % filename)
    template.export(filename)
    return True

def deploy_template(filename):
    client = Client()
    tenant_id = client.get_tenant_id_by_name(CONF.PROJECT.tenant_name)
    deploy_cmd = 'curl -k -u  "admin:admin" -H "multipart/form-data" -F ' \
                 '"templateName=test_template" -F "tenantId=%s" -F ' \
                 '"templateFile=@%s" ' \
                 'https://%s:8443/controller/nb/v2/waypoint/template' \
                 '/import' %(tenant_id, filename, CONF.sdn_controller)
    if tenant_id and filename and CONF.sdn_controller:
        p = subprocess.Popen(deploy_cmd, shell=True, stdout=subprocess.PIPE,
                             stderr=subprocess.STDOUT).communicate()
        if p[1]:
            print p[1]
    output('Deploy the generated template %s.\n' % filename)


def _gen_and_deploy(model, policy_name, reverse=False,deploy=False):
    if not policy_name:
        return
    file_name = policy_name.replace(' ', '_')
    if reverse:
        file_name += '_reverse.json'
    else:
        file_name += '.json'
    if gen_template(model, file_name, reverse) and deploy:
        deploy_template(file_name)


def gen_and_deploy(bidirectional=False,deploy=False):
    model = Model(src=CONF.src, dst=CONF.dst, services=CONF.services,
                  policy_name=CONF.policy_name)
    _gen_and_deploy(model, policy_name=CONF.policy_name, reverse=False,
                    deploy=deploy)
    if bidirectional:
        _gen_and_deploy(model, policy_name=CONF.policy_name, reverse=True,
                        deploy=deploy)


# --config-dir /etc
if __name__ == "__main__":
    try:
        config.init(sys.argv[1:])
        gen_and_deploy(CONF.bidirectional, CONF.deploy)
    except ValueError as e:
        # Print exception
        type_, val_, trace_ = sys.exc_info()
        errorMsg = _("-" * 80 + "\n" +
                     "Caught exception. Cleaning up...\n\n" +
                     "%s: %s\n" % (type_.__name__, val_) +
                     "-" * 80 + "\n")
        output(errorMsg)
        # Print stack trace to debug log
        import traceback
        stackTrace = traceback.format_exc()
        output(stackTrace)
